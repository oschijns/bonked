[package]
name = "bonked2d"
description = "Simple 2D collision engine"
authors.workspace = true
repository.workspace = true
version.workspace = true
edition.workspace = true
license.workspace = true

# Compile Features
[features]
default = ["2d", "parry-f32", "mask-u32", "std"]
2d = []
mask-u32 = []
mask-u64 = []

# enable support for the standard library
std = [
    "parry2d?/std",
    "parry2d-f64?/std",
    "nalgebra-glm/std",
    "bvh-arena/std",
    "spin/std",
]

# enable support for alloc
alloc = ["parry2d?/alloc", "parry2d-f64?/alloc"]

# enable support for Single Instruction Multiple Data
simd = ["parry2d?/simd-stable", "parry2d-f64?/simd-stable"]

# We unfortunately can't reuse the f32 and f64 features for this,
# because Parry uses separate crates for f32 and f64.
parry-f32 = ["dep:parry2d"]
parry-f64 = ["dep:parry2d-f64"]


# Library configuration
[lib]
name = "bonked2d"
#path = "../../src/lib.rs"
required-features = ["2d"]

# Dependencies
[dependencies]

# Mutable access to shared references
spin = "0.10"

# Broadphase
bvh-arena = { version = "1.1", default-features = false }

# Collision Detection
parry2d = { version = "0.19", features = [
    "required-features",
    "alloc",
], default-features = false, optional = true }
parry2d-f64 = { version = "0.19", features = [
    "required-features",
    "alloc",
], default-features = false, optional = true }

# Geometry operations
nalgebra-glm = { version = "0.19", default-features = false }

# Delegate methods from internal fields
delegate = "0.13"

# Dependencies for examples
[dev-dependencies]

# Quick rendering
macroquad = "0.4"
